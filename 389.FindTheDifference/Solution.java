// Given two strings s and t which consist of only lowercase letters.

// String t is generated by random shuffling string s and then add one more letter at a random position.

// Find the letter that was added in t.

// Example:

// Input:
// s = "abcd"
// t = "abcde"

// Output:
// e

// Explanation:
// 'e' is the letter that was added.
import java.util.*;
public class Solution {
	// Use HashMap
  // public char findTheDifference(String s, String t) {
  //   Map<Character, Integer> hm = new HashMap<>();
  //   Character result = ' ';

  //   for (int i = 0; i < s.length(); i++) {
  //   	Character cs = s.charAt(i);
  //   	Character ct = t.charAt(i);

  //   	if (hm.containsKey(cs)) hm.put(cs, hm.get(cs)+1);
  //   	else hm.put(cs, 1);

  //   	if (hm.containsKey(ct)) hm.put(ct, hm.get(ct)+1);
  //   	else hm.put(ct, 1);
  //   }

  //   if (hm.containsKey(t.charAt(s.length()))) hm.put(t.charAt(s.length()), hm.get(t.charAt(s.length()))+1);
  //   else hm.put(t.charAt(s.length()), 1);

  //   for (Character key : hm.keySet()) {
  //   	if (hm.get(key) % 2 != 0) result = key;
  //   }
  //   return result;
  // }

  // Use Array
  // public char findTheDifference(String s, String t) {
  // 	int[] arr = new int[26];

  // 	for (char c : s.toCharArray()) {
  // 		arr[c - 'a']++;
  // 	}

  // 	for (char c : t.toCharArray()) {
  // 		arr[c - 'a']--;
  // 		if (arr[c - 'a'] < 0) return c;
  // 	}

  // 	return ' ';
  // }

	// Another solution:
	// public char findTheDifference(String s, String t) {
	// 	int charCodeS = 0, charCodeT = 0;
	// 	for (char c : s.toCharArray()) charCodeS += (int)c;
	// 	for (char c : t.toCharArray()) charCodeT += (int)c;

	// 	return (char)(charCodeT - charCodeS);
	// }

	// Use bit manipulation
	public char findTheDifference(String s, String t) {
		int len = s.length();
		int c = t.charAt(len);

		for (int i = 0; i < len; i++) {
			c ^= s.charAt(i);
			c ^= t.charAt(i);
		}
		return c;
	}


  public static void main(String[] args) {
  	String s = "abcd";
  	String t = "adbcd";
  	Solution sol = new Solution();

  	System.out.println(sol.findTheDifference(s, t));
  }
}